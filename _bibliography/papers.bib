@misc{Sokolowski:2023:Creed,
  acronym = {CONFLANG},
  file = {papers/2023_Creed-for-Speed-Comprehensive-Infrastructure-as-Code-Testing.pdf},
  author = {Sokolowski, Daniel and Spielmann, David and Salvaneschi, Guido},
  title = {Creed for Speed: Comprehensive Infrastructure as Code Testing},
  year = {2023},
  howpublished = {Presentation at the CONFLANG 2023 workshop},
  abstract = {With Programming Languages Infrastructure as Code (PL-IaC), developers implement imperative IaC programs in one of many general-purpose programming languages, e.g., TypeScript, Python, or Go, to declaratively describe deployments. Using these languages provides access to quality assurance techniques and tools developed for traditional software; however, programmers routinely rely on prohibitively slow integration testing â€“ if they test at all. As a result, even simple bugs are found late, tremendously slowing down the development process.\par To improve the velocity of PL-IaC development, we propose ProTI, an automated unit testing approach that quickly tests PL-IaC programs in many different configurations. ProTI mocks all cloud resources, replacing them with pluggable oracles that validate all resources configurations and a generator for realistic test inputs. We implemented ProTI for Pulumi TypeScript with simple generator and oracle plugins. Our experience of testing with ProTI encourages the exploration of more sophisticated oracles and generators, leading to the early detection of more bugs. ProTI enables programmers to rapidly prototype, explore, and plug in new oracles and generators for efficient PL-IaC program testing.},
}

% Preliminary entry
@inproceedings{Spielmann:2023:Extensible,
  acronym = {SPLASH Companion},
  file = {papers/2023_Extensible-Testing-for-Infrastructure-as-Code.pdf},
  author = {Spielmann, David and Sokolowski, Daniel and Salvaneschi, Guido},
  title = {Extensible Testing for Infrastructure as Code},
  booktitle = {Companion Proceedings of the 2023 ACM SIGPLAN International Conference on Systems, Programming, Languages, and Applications: Software for Humanity},
  series = {SPLASH Companion '23},
  year = {2023},
  isbn = {979-8-4007-0384-3/23/10},
  doi = {10.1145/3618305.3623607},
}

@inproceedings{Sokolowski:2023:Towards,
  acronym = {FIST},
  file = {papers/2023_Towards-Reliable-Infrastructure-as-Code.pdf},
  author = {Sokolowski, Daniel and Salvaneschi, Guido},
  title = {Towards Reliable Infrastructure as Code},
  booktitle = {Companion Proceedings of 2023 IEEE 20th International Conference on Software Architecture},
  series = {ICSA Companion '23},
  year = {2023},
  month = mar,
  numpages = {4},
  pages = {318--321},
  location = {L'Aquila, Italy},
  publisher = {IEEE},
  address = {Piscataway, NJ, USA},
  isbn = {978-1-6654-6460-4},
  doi = {10.1109/ICSA-C57050.2023.00072},
  keywords = {Infrastructure as Code, Cloud Engineering, Fuzzing, Property-based Testing, Verification},
  abstract = {Modern Infrastructure as Code (IaC) programs are increasingly complex and much closer to traditional software than to simple configuration scripts. Their reliability is crucial because their failure prevents the deployment of applications, and incorrect behavior can introduce malfunction and severe security issues. Yet, software engineering tools to develop reliable programs, such as testing and verification, are barely used in IaC. In fact, we observed that developers mainly rely on integration testing, a slow and expensive practice that can increase confidence in end-to-end functionality but is infeasible to systematically test IaC programs in various configurations---which is required to ensure robustness. On the other hand, fast testing techniques, such as unit testing, are cumbersome with IaC programs because, today, they require significant coding overhead while only providing limited confidence.\par To solve this issue, we envision the automated testing tool ProTI, reducing the manual overhead and boosting confidence in the test results. ProTI embraces modern unit testing techniques to test IaC programs in many different configurations. Out of the box, ProTI is a fuzzer for Pulumi TypeScript IaC programs, randomly testing the program in many different configurations for termination, configuration correctness, and existing policy compliance. Then developers can add specifications to their program to guide random-based value generation, test additional properties, and add further mocking, making ProTI a property-based testing tool. Lastly, we aim at automatically verifying IaC-specific properties, e.g., access paths between resources.},
}
